trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'azureServiceConnection'   # Azure DevOps service connection name
  aksClusterName: 'aks-cluster'
  aksResourceGroup: 'rg-landing-zone'
  acrName: 'myacr'
  containerRegistry: 'myacr.azurecr.io'
  imageName: 'myapp'
  helmReleaseName: 'myapp'
  helmChartPath: './helm/myapp-chart'
  keyVaultName: 'rg-landing-zone-kv'

stages:

# ===============================
# 1. CI: Terraform Plan
# ===============================
- stage: terraform
  displayName: 'CI – Terraform Plan'
  jobs:
    - job: terraform
      displayName: 'Run Terraform Plan'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - script: terraform version
          displayName: 'Check Terraform Version'

        - script: terraform init
          workingDirectory: landing-zone
          displayName: 'Terraform Init'

        - script: terraform validate
          workingDirectory: landing-zone
          displayName: 'Terraform Validate'

        - script: terraform plan -out=tfplan.out
          workingDirectory: landing-zone
          displayName: 'Terraform Plan'

        - publish: landing-zone/tfplan.out
          artifact: terraformPlan
          displayName: 'Publish Terraform Plan Artifact'

# ===============================
# 2. CD: Terraform Apply (Manual Approval)
# ===============================
- stage: terraform_apply
  displayName: 'CD – Apply Terraform Plan'
  dependsOn: terraform
  condition: succeeded()
  jobs:
    - deployment: apply
      displayName: 'Terraform Apply'
      environment: 'infra-approval'  # Requires manual approval (must be created in Azure DevOps UI)
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: terraformPlan
                displayName: 'Download Terraform Plan'

              - checkout: self

              - script: terraform version
                displayName: 'Check Terraform Version'

              - script: terraform init
                workingDirectory: landing-zone
                displayName: 'Terraform Init'

              - script: terraform apply -auto-approve tfplan.out
                workingDirectory: landing-zone
                displayName: 'Terraform Apply'

# ===============================
# 3. CI: Build and Push Docker Image
# ===============================
- stage: build
  displayName: 'CI – Build & Push Docker Image'
  dependsOn: terraform_apply
  jobs:
    - job: docker
      displayName: 'Docker Build & Push'
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - checkout: self

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              docker build -t $(containerRegistry)/$(imageName):$(Build.BuildId) .
              docker push $(containerRegistry)/$(imageName):$(Build.BuildId)

# ===============================
# 4. CD: Deploy to AKS using Helm
# ===============================
- stage: deploy
  displayName: 'CD – Deploy to AKS with Helm'
  dependsOn: build
  jobs:
    - deployment: helmDeploy
      displayName: 'Helm Deploy'
      environment: 'aks-dev'  # Auto-created on first use if not already existing
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self

              - task: AzureCLI@2
                inputs:
                  azureSubscription: $(azureSubscription)
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    echo "Getting AKS credentials..."
                    az aks get-credentials --name $(aksClusterName) --resource-group $(aksResourceGroup) --overwrite-existing

                    echo "Deploying with Helm..."
                    helm lint $(helmChartPath)
                    helm upgrade --install $(helmReleaseName) $(helmChartPath) \
                      --set image.repository=$(containerRegistry)/$(imageName) \
                      --set image.tag=$(Build.BuildId)

# ===============================
# 5. CD: Post-deploy Monitoring Check
# ===============================
- stage: monitor
  displayName: 'CD – Post-deploy Monitoring Check'
  dependsOn: deploy
  jobs:
    - job: verify
      displayName: 'Verify Prometheus/Grafana Pods'
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Checking Prometheus & Grafana health..."
              az aks get-credentials --name $(aksClusterName) --resource-group $(aksResourceGroup) --overwrite-existing

              kubectl get pods -n default | grep prometheus
              kubectl get pods -n default | grep grafana
              if [ $? -ne 0 ]; then
                echo "Prometheus or Grafana pods are not running!"
                exit 1
              else
                echo "Prometheus and Grafana pods are running successfully."
              fi
